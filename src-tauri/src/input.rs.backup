use std::{time::Duration};
use std::thread;

static mut POINTER_ID: usize = 0;

use winapi::{
    um::{
        winuser::{
            FindWindowW,
            GetWindowTextW,
            InitializeTouchInjection,
            TOUCH_FEEDBACK_INDIRECT,
            POINTER_TOUCH_INFO,
            POINTER_INFO,
            PT_TOUCH,
            POINTER_FLAG_DOWN,
            POINTER_FLAG_INRANGE,
            POINTER_FLAG_INCONTACT
        }
    },
    shared::{
        windef::{
            HWND,
            POINT
        }
    }
};

fn _get_window_handle_by_name(window_name: &str) -> Option<HWND> {
    unsafe {
        Some(FindWindowW(
            std::ptr::null(),
            window_name.encode_utf16().collect::<Vec<_>>().as_ptr()
        ))
    }
}

fn _get_window_title(hwnd: HWND) -> String {
    let mut title = [0u16; 256];
    unsafe {
        GetWindowTextW(hwnd, title.as_mut_ptr(), 256);
        String::from_utf16_lossy(&title)
    }
}

pub fn simulate_touch_event(x: i32, y: i32, duration: Duration) {
    unsafe {
        thread::spawn(move || {
            InitializeTouchInjection(32, TOUCH_FEEDBACK_INDIRECT);

            let contact: POINTER_TOUCH_INFO = POINTER_TOUCH_INFO {
                pointerInfo: POINTER_INFO {
                    pointerType: PT_TOUCH,
                    pointerId: POINTER_ID as u32,
                    pointerFlags: POINTER_FLAG_DOWN | POINTER_FLAG_INRANGE | POINTER_FLAG_INCONTACT,
                    ptPixelLocation: POINT { x, y },
                    frameId: 0,
                    sourceDevice: 0
                },
                ..Default::default()
            };

            POINTER_ID += 1;
        });
    }
}